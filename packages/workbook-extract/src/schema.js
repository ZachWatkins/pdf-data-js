/**
 * Create a schema file from a given array of JSON data.
 * @author Zachary K. Watkins, <zwatkins.it@gmail.com>
 * @year 2023
 */

import fs from 'fs'
import path from 'path'
import { jsonToZod } from 'json-to-zod'
import { log } from './utils.js'
import XLSX from 'xlsx'

const schemaFileHeader = `/**
 * This file was generated by workbook-extract.
 * @see https://github.com/zachwatkins/pdf-data-js/tree/main/packages/workbook-extract
 * @date ${new Date().toISOString()}
 */
import z from 'zod'
`

/**
 * Return the schema file contents for a Zod schema file that validates the given data set.
 * @param {mixed} data
 * @returns {string} - The schema file contents.
 */
export function writeSchemaFile(data, target, verbose) {
  log(verbose, 'Converting data to schema file...')

  const contents = schemaFileHeader + jsonToZod(data)

  log(verbose, 'Done.')
  log(verbose, 'Writing to file...')

  fs.writeFileSync(target, contents)

  log(verbose, 'Done.')
  log(
    verbose,
    'Schema file created at',
    target.replace(process.cwd() + path.sep, '')
  )
}

/**
 * Create schema files for a workbook.
 * @param {object} options
 * @param {string} [options.workbook]
 * @param {boolean} [options.verbose]
 * @param {object} [options.config]
 */
export function schema({ workbook, config, verbose }) {
  if (!config || !config.schema) {
    throw new Error(`Config for command "schema" not defined:`, config?.schema)
  }

  for (let i = 0; i < config.schema.length; i++) {
    const task = config.schema[i]
    const taskWorkbook = task.workbook || workbook

    if (fs.existsSync(task.target)) {
      return
    }

    log(verbose, 'Reading', taskWorkbook.replace(process.cwd() + path.sep, ''))

    const wb = XLSX.readFile(taskWorkbook)

    log(verbose, 'Done.')
    log(verbose, 'Selecting data...')

    const data = XLSX.utils.sheet_to_json(wb.Sheets[task.sheet])

    log(verbose, 'Done.')

    writeSchemaFile(data, task.target, verbose)
  }
}

export default { schema }
