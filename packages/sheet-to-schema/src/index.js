/**
 * Create and run Zod schemas for workbooks.
 * @author Zachary K. Watkins, <watkinza@gmail.com>
 * @year 2023
 */
const fs = require('fs')
const z = require('zod')
const path = require('path')
const XLSX = require('xlsx')
const { jsonToZod } = require('json-to-zod')

function isFloat(n) {
  return Number(n) === n && n % 1 !== 0
}

function get(workbook, sheet, schemaLang = 'zod') {
  if (!workbook) {
    throw new Error(`Workbook file not defined.`)
  }
  if (!fs.existsSync(workbook)) {
    throw new Error(`Workbook file "${workbook}" not found.`)
  }

  const wb = XLSX.readFile(workbook)

  if (!sheet) {
    sheet = wb.SheetNames[0]
  }

  const data = XLSX.utils.sheet_to_json(wb.Sheets[sheet])

  const langInterface = 'zod' === schemaLang ? SheetToZod(data) : null

  return langInterface.rowsToSchema(data)
}

/**
 * Create a schema file for a workbook sheet.
 * @param {object} options
 * @param {string} options.workbook Path to workbook file.
 * @param {string} [options.sheet] Name of workbook sheet to evaluate. Default is the first sheet.
 * @param {string} [options.filename] Path to Zod file to write. If undefined, defaults to workbook name with a "[.sheet].zod.js" extension.
 * @returns {boolean} Returns true if the Zod file was written successfully.
 */
function toFile(workbook, sheet, filename) {
  if (!workbook) {
    throw new Error(`Workbook file not defined.`)
  }
  if (!fs.existsSync(workbook)) {
    throw new Error(`Workbook file "${workbook}" not found.`)
  }

  const wb = XLSX.readFile(workbook)

  if (!filename) {
    if (sheet) {
      filename = workbook.replace(path.extname(workbook), `.${sheet}.zod.js`)
    } else {
      if (wb.SheetNames.length < 2) {
        filename = workbook.replace(path.extname(workbook), `.zod.js`)
      } else {
        filename = workbook.replace(
          path.extname(workbook),
          `.${wb.SheetNames[0]}.zod.js`
        )
      }
    }
  }

  if (!sheet) {
    sheet = wb.SheetNames[0]
  }

  const data = XLSX.utils.sheet_to_json(wb.Sheets[sheet])

  const schemaRefName = 'schema'
  const schema = jsonToZod(data, schemaRefName, true)
  fs.writeFileSync(
    filename,
    `/**
 * This file validates data in the "${sheet}" sheet of the
 * "${path.basename(workbook)}" workbook.
 * @date ${new Date().toISOString()}
 * @note File generated by sheet-to-zod.
 * @see https://github.com/zachwatkins/pdf-data-js/tree/main/packages/sheet-to-zod
 */
${schema}
export default ${schemaRefName}
`
  )
  return fs.existsSync(filename)
}

/**
 * Parse a workbook sheet using a Zod schema.
 * @param {object} options
 * @param {string} options.workbook Path to workbook file.
 * @param {string} [options.sheet] Name of workbook sheet to extract, if applicable. Default is first sheet.
 * @param {object} [options.schema] Zod schema object.
 * @param {string} [options.zodfile] Path to Zod file.
 * @returns {ZodError|array} Returns a ZodError if validation fails, otherwise returns an array of zero or more objects.
 */
async function parseSheet({ workbook, sheet, schema, zodfile }) {
  if (!fs.existsSync(workbook)) {
    throw new Error(`Workbook file "${workbook}" not found.`)
  }
  if (zodfile && !fs.existsSync(zodfile)) {
    throw new Error(`Zod file "${zodfile}" not found.`)
  }
  if (!zodfile && !schema) {
    throw new Error(`Zod file or schema undefined.`)
  }

  const wb = XLSX.readFile(workbook)
  if (!sheet) {
    sheet = wb.SheetNames[0]
  }
  if (!schema) {
    schema = await import(path.resolve(zodfile))
  }

  const data = XLSX.utils.sheet_to_json(wb.Sheets[sheet])
  const parsed = schema.safeParse(data)

  return !parsed.success ? parsed.error : parsed.data
}

module.exports = { toFile, get, parseSheet }
