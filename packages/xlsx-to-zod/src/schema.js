/**
 * Create and run Zod schemas for workbooks.
 * @author Zachary K. Watkins, <watkinza@gmail.com>
 * @year 2023
 */

import fs from 'fs'
import path from 'path'
import XLSX from 'xlsx'
import { jsonToZod } from 'json-to-zod'

function log(v, ...message) {
  if (v) {
    if (message.length > 0) {
      // Replace absolute file path references with relative paths.
      for (let i = 0; i < message.length; i++) {
        message[i] = message[i].replace(process.cwd() + path.sep, '')
      }
    }
    console.log(...message)
  }
}

function fileHeader({ workbook, sheet }) {
  return `/**
 * This file validates data in the "${sheet}" sheet of the
 * "${workbook.replace(process.cwd() + path.sep, '')}" workbook.
 * @date ${new Date().toISOString()}
 * @note File generated by workbook-extract.
 * @see https://github.com/zachwatkins/pdf-data-js/tree/main/packages/xlsx-to-zod
 */
import { z } from 'zod';

`
}

function fileFooter() {
  return `
export default schema
`
}

/**
 * Create schema files for a workbook.
 * @param {object} options
 * @param {string} [options.workbook]
 * @param {boolean} [options.verbose]
 * @param {object} [options.config]
 */
export function schema({ workbook, config, verbose }) {
  if (!config || !config.schema) {
    throw new Error(`Config for command "schema" not defined:`, config?.schema)
  }

  for (let i = 0; i < config.schema.length; i++) {
    const task = config.schema[i]
    if (!task.workbook) {
      task.workbook = workbook
    }

    if (task.skipIfExists && fs.existsSync(task.target)) {
      return
    }

    log(verbose, `Reading ${taskWorkbook}...`)

    const wb = XLSX.readFile(taskWorkbook)

    log(verbose, 'Selecting data...')

    const data = XLSX.utils.sheet_to_json(wb.Sheets[task.sheet])

    fs.writeFileSync(
      task.target,
      fileHeader(task) + jsonToZod(data) + fileFooter()
    )
  }
}

export default schema
