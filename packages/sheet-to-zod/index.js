/**
 * Create and run Zod schemas for workbooks.
 * @author Zachary K. Watkins, <watkinza@gmail.com>
 * @year 2023
 */

import fs from 'fs'
import path from 'path'
import XLSX from 'xlsx'
import { jsonToZod } from 'json-to-zod'

function fileHeader({ workbook, sheet }) {
  return `/**
 * This file validates data in the "${sheet}" sheet of the
 * "${workbook.replace(process.cwd() + path.sep, '')}" workbook.
 * @date ${new Date().toISOString()}
 * @note File generated by workbook-extract.
 * @see https://github.com/zachwatkins/pdf-data-js/tree/main/packages/sheet-to-zod
 */
import { z } from 'zod';

`
}

function fileFooter() {
  return `
export default schema
`
}

/**
 * Create schema files for a workbook.
 * @param {object} options
 * @param {object} options.config
 * @param {string} [options.workbook]
 * @param {boolean} [options.verbose]
 */
export function sheetToZod({ workbook, sheet, zodfile, validate, v }) {
  if (!config || !config.schema) {
    throw new Error(`Config for command "schema" not defined:`, config?.schema)
  }

  for (let i = 0; i < config.schema.length; i++) {
    const task = config.schema[i]
    if (!task.workbook) {
      task.workbook = workbook
    }

    if (task.skipIfExists && fs.existsSync(task.target)) {
      return
    }

    const wb = XLSX.readFile(taskWorkbook)

    const data = XLSX.utils.sheet_to_json(wb.Sheets[task.sheet])

    fs.writeFileSync(
      task.target,
      fileHeader(task) + jsonToZod(data) + fileFooter()
    )
  }
}

export async function validateSheetFromZod({
  workbook,
  zodfile,
  sheet,
  verbose,
}) {
  if (!fs.existsSync(workbook)) {
    console.error(`Workbook file "${workbook}" not found.`)
    process.exit(1)
  }
  if (!zodfile) {
    console.error(
      `You must specify a Zod file as your second parameter when using the "--validate" option.`
    )
    process.exit(1)
  }
  if (!fs.existsSync(zodfile)) {
    console.error(`Zod file "${zodfile}" not found.`)
    process.exit(1)
  }

  // Safe to proceed.
  const wb = XLSX.readFile(workbook)
  if (!sheet) {
    sheet = wb.SheetNames[0]
  }

  const schemaModule = await import(path.resolve(zodfile))
  const data = XLSX.utils.sheet_to_json(wb.Sheets[sheet])
  const parsed = schemaModule.safeParse(data)
  if (!parsed.success) {
    if (verbose) {
      console.error(`Validation failed.`)
      console.error(parsed.error)
    }
    return parsed.error
  } else {
    if (verbose) {
      console.log(`Validation succeeded.`)
    }
    return parsed.success
  }
}

export default { sheetToZod, validateSheetFromZod }
